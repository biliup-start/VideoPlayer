name: Sync with Upstream

on:
  schedule:
    - cron: '0 * * * *'  # 每小时运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: 'main'
        token: ${{ secrets.PAT }}  # 使用你的个人访问令牌

    - name: Clone upstream
      run: |
        git clone --branch v5 https://github.com/SmallPeaches/DanmakuRender.git upstream_repo

    - name: Copy and Modify Files
      run: |
        cp -r upstream_repo/DMR/LiveAPI/* api/
        cp -r upstream_repo/DMR/Uploader/* biliup/
        cp -r upstream_repo/DMR/utils/* biliup/utils/
        sed -i "s/'.login_info\/.bili_watch_cookies.json'/'biliup\/cookies.json'/g" api/bilibili.py
        sed -i "s/'.login_info\/bilibili.json'/'biliup\/cookies.json'/g" api/bilibili.py
        sed -i "s/from DMR.Uploader.biliuprs/from biliup.biliuprs/g" api/bilibili.py
        sed -i "s/from DMR.utils/from biliup.utils/g" biliup/biliuprs.py
        sed -i "s/.login_info\//biliup\//g" biliup/biliuprs.py
        sed -i "s/tools\/biliup/biliup\/biliup/g" biliup/utils/toolsmgr.py
        sed -i "s/from ..utils/from biliup.utils/g" api/__init__.py
        sed -i "s/from DMR.LiveAPI/from api/g" biliup/__init__.py
        sed -i "s/from DMR.utils/from biliup.utils/g" biliup/__init__.py

    - name: Check for changes
      id: changes
      if: github.event_name == 'schedule'
      run: |
        git diff --name-only | grep api/ && echo "api_changed=true" >> $GITHUB_ENV || echo "api_changed=false" >> $GITHUB_ENV
        git diff --name-only | grep -v 'biliup/cookies.json' | grep biliup/ && echo "biliup_changed=true" >> $GITHUB_ENV || echo "biliup_changed=false" >> $GITHUB_ENV

    - name: Get latest release tag
      id: latesttag
      run: |
        if [ -f "static/version.txt" ]; then
          latest_tag=$(cat static/version.txt)
        else
          latest_tag="v0.0.0"
        fi
        echo "tag=${latest_tag}" >> $GITHUB_ENV

    - name: Calculate new version
      id: semver
      run: |
        IFS='.' read -ra VERSION_PARTS <<< "${{ env.tag }}"
        PATCH=$((VERSION_PARTS[2] + 1))
        NEW_TAG="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${PATCH}"
        echo "new_version=${NEW_TAG}" >> $GITHUB_ENV
        
    - name: Update version file
      run: |
        echo "${{ env.new_version }}" > static/version.txt

    - name: Create git tag
      if: github.event_name == 'workflow_dispatch' || env.api_changed == 'true' || env.biliup_changed == 'true'
      run: |
        git tag ${{ env.new_version }}
        git push origin ${{ env.new_version }}

    - name: Package and Release
      if: github.event_name == 'workflow_dispatch' || env.api_changed == 'true' || env.biliup_changed == 'true'
      run: |
        tar -czvf VideoPlayer.tar.gz --exclude=.git --exclude=Example --exclude=upstream_repo --exclude=README.md --exclude=requirements.txt --exclude=static/version.txt *
        cp VideoPlayer.tar.gz Example.tar.gz
        tar -xvf Example.tar.gz
        cp Example/main.py .
        cp -r Example/templates .
        tar -czvf Example.tar.gz --exclude=.git --exclude=VideoPlayer.tar.gz --exclude=Example.tar.gz --exclude=upstream_repo --exclude=Example --exclude=README.md --exclude=requirements.txt *

    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || env.api_changed == 'true' || env.biliup_changed == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: ${{ env.new_version }}
        release_name: VideoPlayer ${{ env.new_version }}
        draft: false
        prerelease: false

    - name: Upload Release VideoPlayer
      if: github.event_name == 'workflow_dispatch' || env.api_changed == 'true' || env.biliup_changed == 'true'
      id: upload-release-VideoPlayer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./VideoPlayer.tar.gz
        asset_name: VideoPlayer.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Example
      if: github.event_name == 'workflow_dispatch' || env.api_changed == 'true' || env.biliup_changed == 'true'
      id: upload-release-Example
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Example.tar.gz
        asset_name: Example.tar.gz
        asset_content_type: application/gzip

    - name: Commit version file
      if: github.event_name == 'workflow_dispatch' || env.api_changed == 'true' || env.biliup_changed == 'true'
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add static/version.txt
        git commit -m "更新 version"
        git push origin main

    - name: Commit other changes
      if: env.api_changed == 'true' || env.biliup_changed == 'true'
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add biliup/* api/*
        git commit -m "同步上游 SmallPeaches/DanmakuRender"
        git push origin main
